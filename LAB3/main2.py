

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk, ImageDraw
import numpy as np
import threading
from typing import Optional, Tuple

from base_filter import BaseFilter
from box_blur import BoxBlurFilter
from gaussian_blur import GaussianBlurFilter
from median_filter import MedianFilter
from sobel_filter import SobelFilter
from unsharp_mask import UnsharpMaskFilter
from sketch_filter import SketchFilter


class ImageFilterApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    
    def __init__(self, root):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ tkinter
        """
        self.root = root
        self.root.title("–§–∏–ª—å—Ç—Ä—ã —Å–≤—ë—Ä—Ç–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.root.geometry("1500x900")
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.original_image: Optional[np.ndarray] = None
        self.filtered_image: Optional[np.ndarray] = None
        self.current_filter: Optional[BaseFilter] = None
        self.processing = False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        self.selection_mode = False
        self.selection_start: Optional[Tuple[int, int]] = None
        self.selection_end: Optional[Tuple[int, int]] = None
        self.selection_rect_id = None
        self.mask: Optional[np.ndarray] = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞)
        self.display_scale = 1.0
        self.display_size: Optional[Tuple[int, int]] = None
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._create_ui()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._load_test_image()
    
    def _create_ui(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, padding="10")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_container.columnconfigure(1, weight=1)
        main_container.rowconfigure(1, weight=1)
        
        # === –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–°–õ–ï–í–ê) ===
        control_frame = ttk.LabelFrame(main_container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="10")
        control_frame.grid(row=0, column=0, rowspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        canvas_control = tk.Canvas(control_frame, width=280)
        scrollbar = ttk.Scrollbar(control_frame, orient="vertical", command=canvas_control.yview)
        scrollable_frame = ttk.Frame(canvas_control)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas_control.configure(scrollregion=canvas_control.bbox("all"))
        )
        
        canvas_control.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas_control.configure(yscrollcommand=scrollbar.set)
        
        canvas_control.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        ttk.Button(scrollable_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                  command=self._load_image, width=25).pack(pady=5)
        ttk.Button(scrollable_frame, text="üé≤ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                  command=self._load_test_image, width=25).pack(pady=5)
        ttk.Button(scrollable_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                  command=self._save_image, width=25).pack(pady=5)
        
        ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)
        
        # === –í–´–î–ï–õ–ï–ù–ò–ï –û–ë–õ–ê–°–¢–ò ===
        selection_frame = ttk.LabelFrame(scrollable_frame, text="–í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏", padding="5")
        selection_frame.pack(fill='x', pady=5)
        
        self.selection_enabled_var = tk.BooleanVar(value=False)
        selection_check = ttk.Checkbutton(
            selection_frame, 
            text="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è",
            variable=self.selection_enabled_var,
            command=self._toggle_selection_mode
        )
        selection_check.pack(anchor='w', pady=2)
        
        ttk.Label(selection_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫:", 
                 font=('Arial', 9, 'bold')).pack(anchor='w', pady=(5, 2))
        
        self.mask_mode_var = tk.StringVar(value='selected')
        ttk.Radiobutton(
            selection_frame, 
            text="–í—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",
            variable=self.mask_mode_var, 
            value='selected'
        ).pack(anchor='w', padx=10)
        
        ttk.Radiobutton(
            selection_frame, 
            text="–ù–µ–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",
            variable=self.mask_mode_var, 
            value='unselected'
        ).pack(anchor='w', padx=10)
        
        ttk.Button(
            selection_frame, 
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", 
            command=self._clear_selection
        ).pack(fill='x', pady=5)
        
        self.selection_info_var = tk.StringVar(value="–í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
        ttk.Label(
            selection_frame, 
            textvariable=self.selection_info_var,
            font=('Arial', 8),
            foreground='blue'
        ).pack(anchor='w')
        
        ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)
        
        # === –§–ò–õ–¨–¢–†–´ ===
        filters_label = ttk.Label(scrollable_frame, text="–§–∏–ª—å—Ç—Ä—ã:", font=('Arial', 11, 'bold'))
        filters_label.pack(anchor='w', pady=(10, 5))
        
        # Box Blur
        box_frame = ttk.LabelFrame(scrollable_frame, text="Box Blur", padding="5")
        box_frame.pack(fill='x', pady=5)
        
        self.box_size_var = tk.IntVar(value=5)
        ttk.Label(box_frame, text="–†–∞–∑–º–µ—Ä —è–¥—Ä–∞:").pack(anchor='w')
        box_scale = ttk.Scale(box_frame, from_=3, to=45, variable=self.box_size_var, 
                 orient='horizontal')
        box_scale.pack(fill='x')
        box_scale.configure(command=lambda v: self._update_box_label())
        self.box_label = ttk.Label(box_frame, text="5")
        self.box_label.pack(anchor='w')
        ttk.Button(box_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å Box Blur", 
                  command=lambda: self._apply_filter('box')).pack(fill='x', pady=5)
        
        # Gaussian Blur
        gauss_frame = ttk.LabelFrame(scrollable_frame, text="Gaussian Blur", padding="5")
        gauss_frame.pack(fill='x', pady=5)
        
        self.gauss_size_var = tk.IntVar(value=5)
        self.gauss_sigma_var = tk.DoubleVar(value=1.4)
        
        ttk.Label(gauss_frame, text="–†–∞–∑–º–µ—Ä —è–¥—Ä–∞:").pack(anchor='w')
        gauss_scale = ttk.Scale(gauss_frame, from_=3, to=45, variable=self.gauss_size_var,
                 orient='horizontal')
        gauss_scale.pack(fill='x')
        gauss_scale.configure(command=lambda v: self._update_gauss_label())
        self.gauss_size_label = ttk.Label(gauss_frame, text="5")
        self.gauss_size_label.pack(anchor='w')
        
        ttk.Label(gauss_frame, text="Sigma:").pack(anchor='w')
        sigma_scale = ttk.Scale(gauss_frame, from_=0.5, to=50.0, variable=self.gauss_sigma_var,
                 orient='horizontal')
        sigma_scale.pack(fill='x')
        sigma_scale.configure(command=lambda v: self._update_sigma_label())
        self.gauss_sigma_label = ttk.Label(gauss_frame, text="1.4")
        self.gauss_sigma_label.pack(anchor='w')
        
        ttk.Button(gauss_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å Gaussian Blur", 
                  command=lambda: self._apply_filter('gaussian')).pack(fill='x', pady=5)
        
        # Median Filter
        median_frame = ttk.LabelFrame(scrollable_frame, text="Median Filter", padding="5")
        median_frame.pack(fill='x', pady=5)
        
        self.median_size_var = tk.IntVar(value=5)
        ttk.Label(median_frame, text="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞:").pack(anchor='w')
        median_scale = ttk.Scale(median_frame, from_=3, to=45, variable=self.median_size_var,
                 orient='horizontal')
        median_scale.pack(fill='x')
        median_scale.configure(command=lambda v: self._update_median_label())
        self.median_label = ttk.Label(median_frame, text="5")
        self.median_label.pack(anchor='w')
        ttk.Button(median_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å Median Filter", 
                  command=lambda: self._apply_filter('median')).pack(fill='x', pady=5)
        

        # Unsharp Mask
        sharp_frame = ttk.LabelFrame(scrollable_frame, text="Unsharp Mask (—Ä–µ–∑–∫–æ—Å—Ç—å)", padding="5")
        sharp_frame.pack(fill='x', pady=5)
        
        self.sharp_sigma_var = tk.DoubleVar(value=1.0)
        self.sharp_amount_var = tk.DoubleVar(value=1.5)
        
        ttk.Label(sharp_frame, text="Sigma (—Ä–∞–∑–º—ã—Ç–∏–µ):").pack(anchor='w')
        ttk.Scale(sharp_frame, from_=0.5, to=3.0, variable=self.sharp_sigma_var, orient='horizontal').pack(fill='x')
        ttk.Label(sharp_frame, textvariable=tk.StringVar(value="1.0"), 
                 text="1.0").pack(anchor='w')  
        
        ttk.Label(sharp_frame, text="–°–∏–ª–∞:").pack(anchor='w')
        ttk.Scale(sharp_frame, from_=0.5, to=3.0, variable=self.sharp_amount_var, orient='horizontal').pack(fill='x')
        
        ttk.Button(sharp_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∑–∫–æ—Å—Ç—å", 
                  command=lambda: self._apply_filter('unsharp')).pack(fill='x', pady=5)

        # Sketch
        ttk.Button(scrollable_frame, text="üé® –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Å–∫–∏–∑", 
                  command=lambda: self._apply_filter('sketch')).pack(fill='x', pady=5)
        
        # Sobel Operator
        sobel_frame = ttk.LabelFrame(scrollable_frame, text="Sobel Operator", padding="5")
        sobel_frame.pack(fill='x', pady=5)
        
        self.sobel_direction_var = tk.StringVar(value='magnitude')
        directions = [('–ú–∞–≥–Ω–∏—Ç—É–¥–∞', 'magnitude'), ('–û–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'both'),
                     ('–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ (X)', 'x'), ('–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ (Y)', 'y')]
        
        for text, value in directions:
            ttk.Radiobutton(sobel_frame, text=text, variable=self.sobel_direction_var, 
                           value=value).pack(anchor='w')
        
        ttk.Button(sobel_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å Sobel", 
                  command=lambda: self._apply_filter('sobel')).pack(fill='x', pady=5)
        
        ttk.Separator(scrollable_frame, orient='horizontal').pack(fill='x', pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        ttk.Button(scrollable_frame, text="‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É", 
                  command=self._reset_image, width=25).pack(pady=5)
        ttk.Button(scrollable_frame, text="üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å —à—É–º", 
                  command=self._add_noise, width=25).pack(pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = ttk.Label(scrollable_frame, textvariable=self.status_var, 
                                relief='sunken', anchor='w', wraplength=250)
        status_label.pack(side='bottom', fill='x', pady=(10, 0))
        
        # === –ü–ê–ù–ï–õ–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–°–ü–†–ê–í–ê) ===
        images_frame = ttk.Frame(main_container)
        images_frame.grid(row=0, column=1, rowspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        images_frame.columnconfigure(0, weight=1)
        images_frame.columnconfigure(1, weight=1)
        images_frame.rowconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(images_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                               font=('Arial', 14, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=10)
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_frame = ttk.LabelFrame(images_frame, text="–û—Ä–∏–≥–∏–Ω–∞–ª (–∫–ª–∏–∫–Ω–∏—Ç–µ –∏ —Ç—è–Ω–∏—Ç–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è)", padding="5")
        original_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        original_frame.columnconfigure(0, weight=1)
        original_frame.rowconfigure(0, weight=1)
        
        self.original_canvas = tk.Canvas(original_frame, bg='#2b2b2b', highlightthickness=0)
        self.original_canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.original_canvas.bind("<ButtonPress-1>", self._on_canvas_press)
        self.original_canvas.bind("<B1-Motion>", self._on_canvas_drag)
        self.original_canvas.bind("<ButtonRelease-1>", self._on_canvas_release)
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filtered_frame = ttk.LabelFrame(images_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", padding="5")
        filtered_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        filtered_frame.columnconfigure(0, weight=1)
        filtered_frame.rowconfigure(0, weight=1)
        
        self.filtered_canvas = tk.Canvas(filtered_frame, bg='#2b2b2b', highlightthickness=0)
        self.filtered_canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–µ
        self.filter_info_var = tk.StringVar(value="–§–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω")
        info_label = ttk.Label(images_frame, textvariable=self.filter_info_var, 
                              font=('Arial', 10, 'italic'))
        info_label.grid(row=2, column=0, columnspan=2, pady=5)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–õ–ê–ô–î–ï–†–û–í ===
    
    def _update_box_label(self):
        """–û–±–Ω–æ–≤–∏—Ç—å label –¥–ª—è Box Blur –∏ —Å–¥–µ–ª–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—á—ë—Ç–Ω—ã–º."""
        val = int(self.box_size_var.get())
        if val % 2 == 0:
            val += 1
            self.box_size_var.set(val)
        self.box_label.config(text=str(val))
    
    def _update_gauss_label(self):
        """–û–±–Ω–æ–≤–∏—Ç—å label –¥–ª—è Gaussian Blur –∏ —Å–¥–µ–ª–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—á—ë—Ç–Ω—ã–º."""
        val = int(self.gauss_size_var.get())
        if val % 2 == 0:
            val += 1
            self.gauss_size_var.set(val)
        self.gauss_size_label.config(text=str(val))
    
    def _update_sigma_label(self):
        """–û–±–Ω–æ–≤–∏—Ç—å label –¥–ª—è sigma."""
        val = self.gauss_sigma_var.get()
        self.gauss_sigma_label.config(text=f"{val:.2f}")
    
    def _update_median_label(self):
        """–û–±–Ω–æ–≤–∏—Ç—å label –¥–ª—è Median Filter –∏ —Å–¥–µ–ª–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—á—ë—Ç–Ω—ã–º."""
        val = int(self.median_size_var.get())
        if val % 2 == 0:
            val += 1
            self.median_size_var.set(val)
        self.median_label.config(text=str(val))
    
    # === –í–´–î–ï–õ–ï–ù–ò–ï –û–ë–õ–ê–°–¢–ò ===
    
    def _toggle_selection_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è."""
        self.selection_mode = self.selection_enabled_var.get()
        if self.selection_mode:
            self.status_var.set("–†–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è: –∫–ª–∏–∫–Ω–∏—Ç–µ –∏ —Ç—è–Ω–∏—Ç–µ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ")
        else:
            self.status_var.set("–†–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á—ë–Ω")
            self._clear_selection()
    
    def _on_canvas_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ –Ω–∞ canvas."""
        if not self.selection_mode or self.original_image is None:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        self.selection_start = (event.x, event.y)
        self.selection_end = None
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        if self.selection_rect_id:
            self.original_canvas.delete(self.selection_rect_id)
            self.selection_rect_id = None
    
    def _on_canvas_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º—ã—à–∏."""
        if not self.selection_mode or self.selection_start is None:
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        if self.selection_rect_id:
            self.original_canvas.delete(self.selection_rect_id)
        
        # –†–∏—Å—É–µ–º –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        self.selection_rect_id = self.original_canvas.create_rectangle(
            self.selection_start[0], self.selection_start[1],
            event.x, event.y,
            outline='yellow', width=2, dash=(5, 5)
        )
    
    def _on_canvas_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏."""
        if not self.selection_mode or self.selection_start is None:
            return
        
        self.selection_end = (event.x, event.y)
        self._create_mask()
    
    def _create_mask(self):
        """–°–æ–∑–¥–∞—Ç—å –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."""
        if self.selection_start is None or self.selection_end is None or self.original_image is None:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_coords = self._canvas_to_image_coords(
            self.selection_start[0], self.selection_start[1],
            self.selection_end[0], self.selection_end[1]
        )
        
        if img_coords is None:
            return
        
        x1, y1, x2, y2 = img_coords
        
        # –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É
        h, w = self.original_image.shape[:2]
        self.mask = np.zeros((h, w), dtype=bool)
        self.mask[y1:y2, x1:x2] = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        area = (y2 - y1) * (x2 - x1)
        total = h * w
        percentage = (area / total) * 100
        self.selection_info_var.set(
            f"–í—ã–¥–µ–ª–µ–Ω–æ: {x2-x1}x{y2-y1} –ø–∏–∫—Å–µ–ª–µ–π ({percentage:.1f}%)"
        )
        self.status_var.set("–û–±–ª–∞—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∞! –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä")
    
    def _canvas_to_image_coords(self, cx1, cy1, cx2, cy2):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Returns:
            Tuple (x1, y1, x2, y2) –∏–ª–∏ None
        """
        if self.display_size is None or self.original_image is None:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        canvas_w = self.original_canvas.winfo_width()
        canvas_h = self.original_canvas.winfo_height()
        
        disp_w, disp_h = self.display_size
        img_h, img_w = self.original_image.shape[:2]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ)
        offset_x = (canvas_w - disp_w) // 2
        offset_y = (canvas_h - disp_h) // 2
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        img_x1 = int((cx1 - offset_x) / disp_w * img_w)
        img_y1 = int((cy1 - offset_y) / disp_h * img_h)
        img_x2 = int((cx2 - offset_x) / disp_w * img_w)
        img_y2 = int((cy2 - offset_y) / disp_h * img_h)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º (—á—Ç–æ–±—ã x1 < x2, y1 < y2)
        img_x1, img_x2 = sorted([img_x1, img_x2])
        img_y1, img_y2 = sorted([img_y1, img_y2])
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_x1 = max(0, min(img_x1, img_w))
        img_x2 = max(0, min(img_x2, img_w))
        img_y1 = max(0, min(img_y1, img_h))
        img_y2 = max(0, min(img_y2, img_h))
        
        return (img_x1, img_y1, img_x2, img_y2)
    
    def _clear_selection(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ."""
        self.selection_start = None
        self.selection_end = None
        self.mask = None
        
        if self.selection_rect_id:
            self.original_canvas.delete(self.selection_rect_id)
            self.selection_rect_id = None
        
        self.selection_info_var.set("–í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
        self._update_displays()
    
    # === –†–ê–ë–û–¢–ê –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ===
    
    def _load_image(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.bmp *.gif"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            try:
                img = Image.open(file_path)
                img = img.convert('RGB')
                self.original_image = np.array(img)
                self.filtered_image = None
                self.mask = None
                self.display_size = None  # –°–±—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞
                self._update_displays()
                self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{e}")
    
    def _load_test_image(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        size = 600
        image = np.zeros((size, size, 3), dtype=np.uint8)
        
        # –§–æ–Ω - –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for i in range(size):
            image[i, :] = [100 + i // 4, 150, 200 - i // 4]
        
        # –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        image[100:300, 100:300] = [255, 50, 50]
        
        # –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥
        center_y, center_x = size // 2, size // 2
        y, x = np.ogrid[:size, :size]
        mask = (x - center_x - 100)**2 + (y - center_y)**2 <= 80**2
        image[mask] = [50, 255, 50]
        
        # –°–∏–Ω–∏–π –∫—Ä—É–≥
        mask = (x - center_x + 100)**2 + (y - center_y)**2 <= 80**2
        image[mask] = [50, 50, 255]
        
        # –ñ—ë–ª—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        for i in range(150):
            start = 400 - i // 2
            end = 400 + i // 2
            image[350 + i, start:end] = [255, 255, 0]
        
        # –ë–µ–ª—ã–µ –ª–∏–Ω–∏–∏
        image[30:40, :] = [255, 255, 255]
        image[:, 560:570] = [255, 255, 255]
        
        # –¢–µ–∫—Å—Ç—É—Ä–∞ –≤ —É–≥–ª—É
        texture = np.random.randint(100, 200, (80, 120, 3), dtype=np.uint8)
        image[500:580, 20:140] = texture
        
        self.original_image = image
        self.filtered_image = None
        self.mask = None
        self.display_size = None
        self._update_displays()
        self.status_var.set("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    def _save_image(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if self.filtered_image is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            defaultextension=".png",
            filetypes=[
                ("PNG", "*.png"),
                ("JPEG", "*.jpg *.jpeg"),
                ("BMP", "*.bmp"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            try:
                if self.filtered_image.ndim == 3:
                    img = Image.fromarray(self.filtered_image.astype(np.uint8))
                else:
                    img = Image.fromarray(self.filtered_image.astype(np.uint8), mode='L')
                img.save(file_path)
                self.status_var.set(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{e}")
    
    def _add_noise(self):
        """–î–æ–±–∞–≤–∏—Ç—å —à—É–º '—Å–æ–ª—å –∏ –ø–µ—Ä–µ—Ü' –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."""
        if self.original_image is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        noisy = self.original_image.copy()
        amount = 0.05
        
        if noisy.ndim == 3:
            h, w, c = noisy.shape
            num_salt = int(amount * h * w * 0.5)
            num_pepper = int(amount * h * w * 0.5)
            
            coords_y = np.random.randint(0, h, num_salt)
            coords_x = np.random.randint(0, w, num_salt)
            noisy[coords_y, coords_x] = 255
            
            coords_y = np.random.randint(0, h, num_pepper)
            coords_x = np.random.randint(0, w, num_pepper)
            noisy[coords_y, coords_x] = 0
        else:
            num_salt = int(amount * noisy.size * 0.5)
            num_pepper = int(amount * noisy.size * 0.5)
            
            coords = [np.random.randint(0, i, num_salt) for i in noisy.shape]
            noisy[tuple(coords)] = 255
            
            coords = [np.random.randint(0, i, num_pepper) for i in noisy.shape]
            noisy[tuple(coords)] = 0
        
        self.original_image = noisy
        self.filtered_image = None
        self._update_displays()
        self.status_var.set("–î–æ–±–∞–≤–ª–µ–Ω —à—É–º '—Å–æ–ª—å –∏ –ø–µ—Ä–µ—Ü'")
    
    def _reset_image(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É."""
        self.filtered_image = None
        self.current_filter = None
        self.filter_info_var.set("–§–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω")
        self._update_displays()
        self.status_var.set("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
    
    # === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í ===
    
    def _apply_filter(self, filter_type: str):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä."""
        if self.original_image is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        if self.processing:
            return
        
        try:
            if filter_type == 'box':
                size = self.box_size_var.get()
                self.current_filter = BoxBlurFilter(kernel_size=size)
            
            elif filter_type == 'gaussian':
                size = self.gauss_size_var.get()
                sigma = self.gauss_sigma_var.get()
                self.current_filter = GaussianBlurFilter(kernel_size=size, sigma=sigma)
            
            elif filter_type == 'median':
                size = self.median_size_var.get()
                self.current_filter = MedianFilter(kernel_size=size)
            
            elif filter_type == 'sobel':
                direction = self.sobel_direction_var.get()
                self.current_filter = SobelFilter(direction=direction)

            elif filter_type == 'unsharp':
                sigma = self.sharp_sigma_var.get()
                amount = self.sharp_amount_var.get()
                self.current_filter = UnsharpMaskFilter(kernel_size=5, sigma=sigma, amount=amount)

            elif filter_type == 'sketch':
                self.current_filter = SketchFilter(blur_sigma=5.0, blur_kernel=21)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.processing = True
            self.status_var.set(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {self.current_filter.name}...")
            self.filter_info_var.set(f"–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è: {self.current_filter.name}")
            
            thread = threading.Thread(target=self._process_filter)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä:\n{e}")
            self.processing = False
    
    def _process_filter(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)."""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            filtered = self.current_filter.apply(self.original_image)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å–∫–∞, –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if self.mask is not None:
                if self.mask_mode_var.get() == 'selected':
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                    result = self.original_image.copy()
                    if result.ndim == 3:
                        for c in range(result.shape[2]):
                            result[:, :, c][self.mask] = filtered[:, :, c][self.mask]
                    else:
                        result[self.mask] = filtered[self.mask]
                    self.filtered_image = result
                else:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –Ω–µ–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                    result = self.original_image.copy()
                    inverse_mask = ~self.mask
                    if result.ndim == 3:
                        for c in range(result.shape[2]):
                            result[:, :, c][inverse_mask] = filtered[:, :, c][inverse_mask]
                    else:
                        result[inverse_mask] = filtered[inverse_mask]
                    self.filtered_image = result
            else:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                self.filtered_image = filtered

            # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.root.after(0, self._on_filter_complete)

        except Exception as e:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ after
            error_message = str(e)
            self.root.after(0, lambda: self._on_filter_error(error_message))

    def _on_filter_complete(self):
        """Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        self.processing = False
        self._update_displays()
        
        mask_info = ""
        if self.mask is not None:
            mode = "–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π" if self.mask_mode_var.get() == 'selected' else "–Ω–µ–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π"
            mask_info = f" –∫ {mode} –æ–±–ª–∞—Å—Ç–∏"
        
        self.filter_info_var.set(f"–ü—Ä–∏–º–µ–Ω—ë–Ω: {self.current_filter.name}{mask_info}")
        self.status_var.set(f"–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω: {self.current_filter.name}")
    
    def _on_filter_error(self, error_msg: str):
        """Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        self.processing = False
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞:\n{error_msg}")
        self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")
    
    # === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ===
    
    def _update_displays(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ canvas."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if self.original_image is not None:
            self._display_image(self.original_image, self.original_canvas, is_original=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if self.filtered_image is not None:
            self._display_image(self.filtered_image, self.filtered_canvas, is_original=False)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
            if self.original_image is not None:
                self._display_image(self.original_image, self.filtered_canvas, is_original=False)
    
    def _display_image(self, image: np.ndarray, canvas: tk.Canvas, is_original: bool = False):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            canvas: Canvas –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            is_original: –ï—Å–ª–∏ True, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º canvas –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        canvas.update_idletasks()
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if canvas_width < 100:
            canvas_width = 600
        if canvas_height < 100:
            canvas_height = 600
        
        # –°–æ–∑–¥–∞—ë–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image.ndim == 3:
            pil_image = Image.fromarray(image.astype(np.uint8))
        else:
            pil_image = Image.fromarray(image.astype(np.uint8), mode='L')
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± (–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ)
        img_width, img_height = pil_image.size
        
        if is_original or self.display_size is None:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±
            scale = min(canvas_width / img_width, canvas_height / img_height) * 0.95
            new_width = int(img_width * scale)
            new_height = int(img_height * scale)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if is_original:
                self.display_scale = scale
                self.display_size = (new_width, new_height)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            new_width, new_height = self.display_size
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pil_image = pil_image.resize((new_width, new_height), Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
        photo = ImageTk.PhotoImage(pil_image)
        
        # –û—á–∏—â–∞–µ–º canvas
        canvas.delete("all")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        x = canvas_width // 2
        y = canvas_height // 2
        canvas.create_image(x, y, image=photo, anchor='center')
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        if is_original and self.selection_start and self.selection_end and self.selection_mode:
            self.selection_rect_id = canvas.create_rectangle(
                self.selection_start[0], self.selection_start[1],
                self.selection_end[0], self.selection_end[1],
                outline='yellow', width=2, dash=(5, 5)
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        canvas.image = photo


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    root = tk.Tk()
    app = ImageFilterApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()