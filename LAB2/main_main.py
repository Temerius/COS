"""
Main Application
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MIDI –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è
"""
import os
import time
from polyphonic_player import PolyphonicPlayer
from keyboard_controller import KeyboardController


def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("=" * 80)
    print("üéµ POLYPHONIC MIDI PLAYER - Real-time Playback with Multiple Voices üéµ")
    print("=" * 80)


def print_help():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print("\nüìã Controls:")
    print("  SPACE  - Play/Pause")
    print("  R      - Restart from beginning")
    print("  M      - Load MIDI file")
    print("  J      - Load JSON file (parsed notes)")
    print("  H      - Show this help")
    print("  ESC    - Exit application")
    print()
    print("‚ú® Features:")
    print("   ‚Ä¢ Polyphonic playback (multiple notes simultaneously)")
    print("   ‚Ä¢ Continuous phase tracking (no clicks between notes)")
    print("   ‚Ä¢ Automatic MIDI parsing")
    print("   ‚Ä¢ Real-time status display")
    print("=" * 80)


def handle_load_midi(player):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MIDI —Ñ–∞–π–ª–∞
    
    Args:
        player: —ç–∫–∑–µ–º–ø–ª—è—Ä PolyphonicPlayer
    """
    print("\n\nüìÇ Enter MIDI file path (or drag & drop):")
    try:
        filepath = input("> ").strip().strip('"').strip("'")
        
        if os.path.exists(filepath):
            if player.load_from_midi(filepath):
                print("‚úÖ MIDI loaded successfully! Press SPACE to play")
            else:
                print("‚ùå Failed to load MIDI file")
        else:
            print(f"‚ùå File not found: {filepath}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def handle_load_json(player):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞
    
    Args:
        player: —ç–∫–∑–µ–º–ø–ª—è—Ä PolyphonicPlayer
    """
    print("\n\nüìÇ Enter JSON file path (parsed notes):")
    try:
        filepath = input("> ").strip().strip('"').strip("'")
        
        if os.path.exists(filepath):
            if player.load_from_json(filepath):
                print("‚úÖ JSON loaded successfully! Press SPACE to play")
            else:
                print("‚ùå Failed to load JSON file")
        else:
            print(f"‚ùå File not found: {filepath}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print_banner()
    print_help()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    player = PolyphonicPlayer(sample_rate=44100, buffer_size=2048)
    keyboard = KeyboardController()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        player.start()
        print("\nüéµ Player ready! Press M to load a MIDI file")
        print("   Press H for help\n")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        while player.running:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
            key = keyboard.get_key()
            
            if key:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if key == ' ':
                    # Play/Pause
                    if player.playing:
                        player.stop_playback()
                    else:
                        player.start_playback()
                
                elif key in ['r', 'R']:
                    # Restart
                    player.restart()
                
                elif key in ['m', 'M']:
                    # Load MIDI
                    handle_load_midi(player)
                
                elif key in ['j', 'J']:
                    # Load JSON
                    handle_load_json(player)
                
                elif key in ['h', 'H']:
                    # Help
                    print("\n")
                    print_help()
                
                elif key in ['\x1b', '\x03']:
                    # ESC or Ctrl+C - Exit
                    print("\n\nüëã Exiting...")
                    break
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            player.print_status()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
            time.sleep(0.02)
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrupted by user")
    
    except Exception as e:
        print(f"\n\n‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("\nüéµ Stopping player...")
        player.stop()
        keyboard.restore_terminal()
        print("‚úÖ Player stopped. Goodbye!")


if __name__ == "__main__":
    main()