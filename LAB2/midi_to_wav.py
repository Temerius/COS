"""
MIDI to WAV Converter
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MIDI —Ñ–∞–π–ª–æ–≤ –≤ WAV –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""
import numpy as np
import soundfile as sf
import json
import os
from midi_parser import MIDIParser


class MIDIToWavConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä MIDI –≤ WAV —Å –ø–æ–ª–∏—Ñ–æ–Ω–∏–µ–π"""
    
    def __init__(self, sample_rate=44100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        
        Args:
            sample_rate: —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ WAV
        """
        self.sample_rate = sample_rate
        self.dt = 1.0 / sample_rate
        self.midi_parser = MIDIParser()
    
    def generate_sine_wave(self, duration, frequency, amplitude, phase=0.0):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—É—Å–æ–∏–¥—ã
        
        Args:
            duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)
            frequency: —á–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)
            amplitude: –∞–º–ø–ª–∏—Ç—É–¥–∞ (0.0 - 1.0)
            phase: –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ (—Ä–∞–¥–∏–∞–Ω—ã)
            
        Returns:
            tuple: (signal, end_phase)
        """
        n_samples = int(duration * self.sample_rate)
        t = np.arange(n_samples) * self.dt
        
        signal_phase = phase + 2 * np.pi * frequency * t
        signal = amplitude * np.sin(signal_phase)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º envelope –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        envelope = np.ones(n_samples)
        
        # Attack (–ø–µ—Ä–≤—ã–µ 5ms)
        attack_samples = int(0.005 * self.sample_rate)
        if attack_samples > 0 and attack_samples < n_samples:
            envelope[:attack_samples] = np.linspace(0, 1, attack_samples)
        
        # Release (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10ms)
        release_samples = int(0.01 * self.sample_rate)
        if release_samples > 0 and release_samples < n_samples:
            envelope[-release_samples:] = np.linspace(1, 0, release_samples)
        
        signal *= envelope
        
        return signal, signal_phase[-1] if n_samples > 0 else phase
    
    def convert_from_json(self, json_path, output_wav):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ JSON (—Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ MIDI) –≤ WAV
        
        Args:
            json_path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –Ω–æ—Ç–∞–º–∏
            output_wav: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
            
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ç—ã
            with open(json_path, 'r', encoding='utf-8') as f:
                notes_data = json.load(f)
            
            if not notes_data:
                print("‚ùå No notes found in JSON")
                return False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            notes_data.sort(key=lambda x: x['start_time'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            total_duration = max([n['start_time'] + n['duration'] for n in notes_data])
            total_samples = int(total_duration * self.sample_rate)
            
            print(f"\nüìä Converting:")
            print(f"   Notes: {len(notes_data)}")
            print(f"   Duration: {total_duration:.2f}s")
            print(f"   Samples: {total_samples}")
            
            # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä
            audio_buffer = np.zeros(total_samples)
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é –Ω–æ—Ç—É
            print(f"\nüéµ Rendering notes...")
            for i, note in enumerate(notes_data):
                if (i + 1) % 100 == 0:
                    progress = (i + 1) / len(notes_data) * 100
                    print(f"   Progress: {progress:.1f}% ({i + 1}/{len(notes_data)})")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –±—É—Ñ–µ—Ä–µ
                start_sample = int(note['start_time'] * self.sample_rate)
                duration = note['duration']
                frequency = note['frequency']
                amplitude = note['amplitude_norm'] * 0.3  # –°–Ω–∏–∂–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–æ—Ç—ã
                signal, _ = self.generate_sine_wave(duration, frequency, amplitude)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä (–ø–æ–ª–∏—Ñ–æ–Ω–∏—è!)
                end_sample = start_sample + len(signal)
                if end_sample <= total_samples:
                    audio_buffer[start_sample:end_sample] += signal
                else:
                    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω–æ—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                    available = total_samples - start_sample
                    audio_buffer[start_sample:] += signal[:available]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–ø–ø–∏–Ω–≥–∞
            max_val = np.max(np.abs(audio_buffer))
            if max_val > 1.0:
                print(f"   Normalizing: {max_val:.2f} ‚Üí 1.0")
                audio_buffer = audio_buffer / max_val
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV
            print(f"\nüíæ Saving to: {output_wav}")
            sf.write(output_wav, audio_buffer, self.sample_rate)
            
            file_size = os.path.getsize(output_wav) / (1024 * 1024)
            print(f"‚úÖ Success! File size: {file_size:.2f} MB")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error during conversion: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def convert_from_midi(self, midi_path, output_wav):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MIDI ‚Üí JSON ‚Üí WAV
        
        Args:
            midi_path: –ø—É—Ç—å –∫ MIDI —Ñ–∞–π–ª—É
            output_wav: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
            
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º MIDI
            print(f"üìÇ Parsing MIDI: {midi_path}")
            temp_json = "temp_conversion.json"
            self.midi_parser.parse_and_save(midi_path, temp_json)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            result = self.convert_from_json(temp_json, output_wav)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON
            if os.path.exists(temp_json):
                os.remove(temp_json)
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False


def print_banner():
    """–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("=" * 80)
    print("üéµ MIDI to WAV Converter - –ü–æ–ª–∏—Ñ–æ–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥")
    print("=" * 80)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("  1 - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MIDI —Ñ–∞–π–ª")
    print("  2 - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON (—Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π MIDI)")
    print("  3 - –ü–∞–∫–µ—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (–≤—Å–µ MIDI –≤ –ø–∞–ø–∫–µ)")
    
    try:
        choice = input("\n–í—ã–±–æ—Ä (1/2/3): ").strip()
        
        converter = MIDIToWavConverter(sample_rate=44100)
        
        if choice == '1':
            # –û–¥–∏–Ω–æ—á–Ω—ã–π MIDI —Ñ–∞–π–ª
            midi_path = input("\nüìÇ –ü—É—Ç—å –∫ MIDI —Ñ–∞–π–ª—É: ").strip().strip('"').strip("'")
            
            if not os.path.exists(midi_path):
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_wav = os.path.splitext(midi_path)[0] + ".wav"
            
            custom = input(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ [{output_wav}] –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è: ").strip()
            if custom:
                output_wav = custom
            
            converter.convert_from_midi(midi_path, output_wav)
        
        elif choice == '2':
            # JSON —Ñ–∞–π–ª
            json_path = input("\nüìÇ –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É: ").strip().strip('"').strip("'")
            
            if not os.path.exists(json_path):
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            output_wav = os.path.splitext(json_path)[0] + ".wav"
            
            custom = input(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ [{output_wav}] –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è: ").strip()
            if custom:
                output_wav = custom
            
            converter.convert_from_json(json_path, output_wav)
        
        elif choice == '3':
            # –ü–∞–∫–µ—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            folder = input("\nüìÇ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å MIDI —Ñ–∞–π–ª–∞–º–∏: ").strip().strip('"').strip("'")
            
            if not os.path.isdir(folder):
                print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ MIDI —Ñ–∞–π–ª—ã
            midi_files = [f for f in os.listdir(folder) if f.lower().endswith(('.mid', '.midi'))]
            
            if not midi_files:
                print("‚ùå MIDI —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ!")
                return
            
            print(f"\nüéµ –ù–∞–π–¥–µ–Ω–æ {len(midi_files)} MIDI —Ñ–∞–π–ª–æ–≤")
            confirm = input("–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é? (y/n): ").strip().lower()
            
            if confirm != 'y':
                print("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            
            success_count = 0
            for i, midi_file in enumerate(midi_files, 1):
                print(f"\n{'='*80}")
                print(f"[{i}/{len(midi_files)}] {midi_file}")
                print(f"{'='*80}")
                
                midi_path = os.path.join(folder, midi_file)
                output_wav = os.path.splitext(midi_path)[0] + ".wav"
                
                if converter.convert_from_midi(midi_path, output_wav):
                    success_count += 1
            
            print(f"\n{'='*80}")
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(midi_files)}")
            print(f"{'='*80}")
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()